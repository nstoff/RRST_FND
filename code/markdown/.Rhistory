dev.off()
p6noticing <- plotViolinGroups_mean(df,df$maia_note,"MAIA subscale - Noticing")+ stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
p6noticing
pdf("2.3_Plot_MAIA_noticing_violin.pdf")
p6noticing
dev.off()
p7 <- plotViolinGroups_median(df,df$ias,"IAS - Interoceptive Accuracy")+ stat_compare_means(method = "wilcox.test", paired = FALSE, label.x = 1.3)
p7
pdf("2.3_Plot_IAS_violin.pdf")
p7
dev.off()
p8 <- plotViolinGroups_mean(df,df$traitPE_maiaRRST,"TraitPE MAIA-RRST")+ stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
p9 <- plotViolinGroups_mean(df,df$traitPE_iasRRST,"TraitPE IAS-RRST")+ stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
gridExtra::grid.arrange(p8, p9, ncol = 2)
pdf("2.3_Plots_TPE_violin.pdf")
gridExtra::grid.arrange(p8, p9, ncol = 2)
dev.off()
p10 <- plotViolinGroups_mean(df,df$rrst_sensitivity,"Respiratory Sensitivity")+ stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
p11 <- plotViolinGroups_median(df,df$metascore,"Respiratory Metacognition")+ stat_compare_means(method = "wilcox.test", paired = FALSE, label.x = 1.3)
gridExtra::grid.arrange(p10, p11, ncol = 2)
pdf("2.3_Plots_RRST_violin.pdf")
gridExtra::grid.arrange(p10, p11, ncol = 2)
dev.off()
# Table for dependent Variables: group differences
df_tbl <- df %>%
mutate(group = factor(group, levels = c("0", "1"), labels = c("HC", "FND")))
Data.t <- select(df_tbl, c("group", "maia_total","maia_note", "traitPE_maiaRRST", "ias", "traitPE_iasRRST", "rrst_sensitivity" , "metascore"))
library(gtsummary)
tbl2 <- Data.t %>%
tbl_summary(
by = group,
missing = "no",
statistic = list(
maia_total = "{mean} ({sd})",
maia_note = "{mean} ({sd})",
traitPE_maiaRRST = "{mean} ({sd})",
ias = "{median} ({IQR})",
traitPE_iasRRST = "{mean} ({sd})",
rrst_sensitivity = "{mean} ({sd})",
metascore = "{median} ({IQR})"
),
digits = list(maia_total = 1, maia_note = 1, traitPE_maiaRRST = 1, ias = 1, traitPE_iasRRST = 1,
rrst_sensitivity = 2, metascore = 2),
label = list(maia_total= "Interoceptive Awareness Self-Report - MAIA, Mean, (SD)",
maia_note= "MAIA subscale Noticing, Mean, (SD)",
traitPE_maiaRRST= "Respiratory Trait-Prediction-Error, MAIA-RRST, Mean (SD)",
ias= "Interoceptive Accuracy Self-Report - IAS, Median (IQR)",
traitPE_iasRRST = "Respiratory Trait-Prediction-Error, IAS-RRST, Mean (SD)",
rrst_sensitivity= "Respiratory Sensitivity - RRST, Mean (SD)",
metascore= "Respiratory Metacognition - AUC, Median (IQR)"
)
) %>%
modify_header(list(label ~ "**Variable**")) %>%
modify_caption("**Interoception Overview**") %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Group**") %>%
add_p(
test = list(
maia_total = "t.test",
maia_note = "t.test",
traitPE_maiaRRST = "t.test",
ias = "wilcox.test",
traitPE_iasRRST = "t.test",
rrst_sensitivity = "t.test",
metascore = "wilcox.test")
) %>%
add_overall(last = FALSE)
tbl2
tbl2_df <- tbl2 %>% as_tibble()
write_xlsx(tbl2_df, "2.3_Table_dependent_variables.xlsx")
#| warning: FALSE
#| error: FALSE
# calculation of cohens d for variable of interest
# Define the function
calculate_cohens_d <- function(data, variable, group_var, group1, group2) {
# Subset the data for each group
group1_data <- data[[variable]][data[[group_var]] == group1]
group2_data <- data[[variable]][data[[group_var]] == group2]
# Calculate means and standard deviations
mean1 <- mean(group1_data, na.rm = TRUE)
mean2 <- mean(group2_data, na.rm = TRUE)
sd1 <- sd(group1_data, na.rm = TRUE)
sd2 <- sd(group2_data, na.rm = TRUE)
# Calculate sample sizes
n1 <- sum(!is.na(group1_data))
n2 <- sum(!is.na(group2_data))
# Calculate pooled standard deviation
sd_pooled <- sqrt(((n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) / (n1 + n2 - 2))
# Calculate Cohen's d
cohens_d <- (mean1 - mean2) / sd_pooled
# Return Cohen's d
return(cohens_d)
}
# Calculate Cohen's d for variables of interest
cohens_d_rrst <- calculate_cohens_d(df, "rrst_sensitivity", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_rrst) # cohens d of -0.467 means with an effect size of 0.46 FND has LOWER values than HC
cohens_d_meta <- calculate_cohens_d(df, "metascore", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_meta) # cohens d of -0.128 means with an effect size of 0.128 FND has LOWER values than HC
cohens_d_maia <- calculate_cohens_d(df, "maia_total", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_maia) # cohens d of -0.786 means with an effect size of 0.786 FND has LOWER values than HC
cohens_d_maia_note <- calculate_cohens_d(df, "maia_note", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_maia_note) #
cohens_d_ias <- calculate_cohens_d(df, "ias", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_ias) # cohens d of -0.651 means with an effect size of 0.651 FND has LOWER values than HC
cohens_d_bdi <- calculate_cohens_d(df, "bdi", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_bdi) # cohens d of 1.382615 means with an effect size of 1.382615 FND has HIGHER values than HC
cohens_d_stai_t <- calculate_cohens_d(df, "stai_t", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_stai_t) # cohens d of 0.829 means with an effect size of 0.829 FND has HIGHER values than HC
cohens_d_stai_s <- calculate_cohens_d(df, "stai_s", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_stai_s) # cohens d of 1.080 means with an effect size of 1.080 FND has HIGHER values than HC
cohens_d_ctq_total <- calculate_cohens_d(df, "ctq_total", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_ctq_total) # cohens d of 0.662 means with an effect size of 0.662 FND has HIGHER values than HC
cohens_d_sdq <- calculate_cohens_d(df, "sdq", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_sdq) # cohens d of 1.500 means with an effect size of 1.500 FND has HIGHER values than HC
cohens_d_bmi <- calculate_cohens_d(df, "bmi", "group", 1, 0) # group 1=FND, group=0 HC
print(cohens_d_bmi) # cohens d of 0.557 means with an effect size of 0.6621177 FND has HIGHER values than HC
# for binary variable we calculate the ODDS RATIO
model <- glm(group ~ psychotropic_medication, data = df, family = binomial)
summary(model)
# Extract CI and Odds Ratio
confint_logit <- confint(model)  # CI on the log-odds scale
confint_or <- exp(confint_logit) # Exponentiate to get CI for OR
odds_ratio <- exp(coef(model)) # Calculate Odds Ratios
results <- cbind(odds_ratio, confint_or) # Combine OR and CI
results
# Compute the correlation matrix with variables of symptom severity to see whether they correlate
# Select the desired variables
severity_variables <- df_FND[, c("sfmdrs", "cgi", "sdq")]
# Compute the correlation matrix with rcorr
correlation_results <- Hmisc::rcorr(as.matrix(severity_variables))
# Extract correlation coefficients
cor_matrix <- correlation_results$r
# Extract p-values
p_matrix <- correlation_results$P
# Print results
cor_matrix
p_matrix
# SIG correlations of different symptom severity scores
### CGI & SFMDRS corr: r= 0.5841928 , p=3.136863e-05
### CGI & SDQ corr: r = 0.31 , p = 0.045
#| warning: FALSE
#| error: FALSE
# Exclude participants with sfmdrs = 0
filtered_df <- df_FND[df_FND$sfmdrs != 0, ]
# Count how many participants were excluded
excluded_count <- sum(df_FND$sfmdrs == 0)
excluded_count
# SIMPLE CORRELATION OF RRST sensitivity and symptom severity scores - including SDQ
cor1 <- cor.test(df_FND$rrst_sensitivity, df_FND$sdq, method = "pearson") # r = -0.3828185, p-value = 0.01129
cor2 <- cor.test(filtered_df$rrst_sensitivity, filtered_df$sfmdrs, method = "pearson")
cor3 <- cor.test(df_FND$rrst_sensitivity, df_FND$cgi, method = "pearson")
p_values <- c(cor1$p.value, cor2$p.value, cor3$p.value) # extract pvalues
p_adjusted <- p.adjust(p_values, method = "bonferroni") # Correct p-values for multiple comparisons
results_rrst <- data.frame(
Comparison = c("FND: rrst_sensitivity vs sdq", "FND: rrst_sensitivity vs sfmdrs", "FND: rrst_sensitivity vs cgi"),
Original_P = p_values,
Adjusted_P = p_adjusted)
print(results_rrst)
# Save results as a text file
write.table(results_rrst, "3.1_corr_RRST_symptoms.txt", sep = "\t", row.names = FALSE, quote = FALSE)
cor.test(df$metascore, df$sdq, method = "pearson")
# p-value = 0.01012, cor = -0.2683359
#  metascore
cor1 <- cor.test(df_FND$metascore, df_FND$sdq, method = "pearson")  # r = -0.36099, p-value = 0.0174
cor2 <- cor.test(filtered_df$metascore, filtered_df$sfmdrs, method = "pearson")
cor3 <- cor.test(df_FND$metascore, df_FND$cgi, method = "pearson")
p_values <- c(cor1$p.value, cor2$p.value, cor3$p.value) # extract pvalues
p_adjusted <- p.adjust(p_values, method = "bonferroni") # Correct p-values for multiple comparisons (change for fdr / bonferroni etc if needed but result stay the same in this example)
results_meta <- data.frame(
Comparison = c("FND: metascore vs sdq", "FND: metascore vs sfmdrs", "FND: metascore vs cgi"),
Original_P = p_values,
Adjusted_P = p_adjusted)
print(results_meta)
# Save results as a text file
write.table(results_rrst, "3.1_corr_meta_symptoms.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# TPE with IAS
cor.test(df_FND$traitPE_iasRRST, df_FND$sdq, method = "pearson")
cor.test(filtered_df$traitPE_iasRRST, filtered_df$sfmdrs, method = "pearson")
cor.test(df_FND$traitPE_iasRRST, df_FND$cgi, method = "pearson")
cor.test(df_FND$traitPE_maiaRRST, df_FND$sdq, method = "pearson")
cor.test(filtered_df$traitPE_maiaRRST, filtered_df$sfmdrs, method = "pearson")
cor.test(df_FND$traitPE_maiaRRST, df_FND$cgi, method = "pearson")
#### CLINICAL VARIABLES and INTEROCEPTIVE SENSIBILITY
# separate per group
cor.test(df_FND$maia_total, df_FND$sdq, method = "pearson")
cor.test(filtered_df$maia_total, filtered_df$sfmdrs, method = "pearson")
cor.test(df_FND$maia_total, df_FND$cgi, method = "pearson")
cor.test(df_FND$ias, df_FND$sdq, method = "pearson")  # t = -2.32, df = 41, p-value = 0.02539
cor.test(filtered_df$ias, filtered_df$sfmdrs, method = "pearson")
cor.test(df_FND$ias, df_FND$cgi, method = "pearson")
# Collect all p-values from test of interoception varibales and clincial variables
p_values <- c(
cor.test(df_FND$maia_total, df_FND$sdq, method = "pearson")$p.value,
cor.test(filtered_df$maia_total, filtered_df$sfmdrs, method = "pearson")$p.value,
cor.test(df_FND$maia_total, df_FND$cgi, method = "pearson")$p.value,
cor.test(df_FND$ias, df_FND$sdq, method = "pearson")$p.value,
cor.test(filtered_df$ias, filtered_df$sfmdrs, method = "pearson")$p.value,
cor.test(df_FND$ias, df_FND$cgi, method = "pearson")$p.value
)
# Apply Bonferroni correction
adjusted_p_values <- p.adjust(p_values, method = "bonferroni")
# Combine with test names for clarity
test_names <- c(
"MAIA vs sdq (FND)",
"MAIA vs sfmdrs (FND)",
"MAIAvs cgi (FND)",
"IAS vs sdq (FND)",
"IAS vs sfmdrs (FND)",
"IAS vs cgi (FND)")
# Create a data frame for easier interpretation
results <- data.frame(
Test = test_names,
P_Value = p_values,
Adjusted_P_Value = adjusted_p_values
)
# View results
print(results)
# Save results as a text file
write.table(results_rrst, "3.1_corr_intero_symptoms.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# does age need to be a covariate in the model ?
cor.test(df_FND$age, df_FND$rrst_sensitivity, method = "pearson")
cor.test(df_FND$age, df_FND$metascore, method = "pearson")
cor.test(df_FND$age, df_FND$sdq, method = "pearson")
# does bmi need to be a covariate in the model?
cor.test(df_FND$bmi, df_FND$rrst_sensitivity, method = "pearson")
cor.test(df_FND$bmi, df_FND$metascore, method = "pearson")
cor.test(df_FND$bmi, df_FND$sdq, method = "pearson")
# does anx_dep_sum need to be a covariate in the model?
cor.test(df_FND$anx_dep_SUM, df_FND$rrst_sensitivity, method = "pearson")
cor.test(df_FND$anx_dep_SUM, df_FND$metascore, method = "pearson")
cor.test(df_FND$anx_dep_SUM, df_FND$sdq, method = "pearson") # trend with r= 0.294215, p-value = 0.05548
# does medication need to be a covariate in the model?
res<-t.test(df_FND$rrst_sensitivity[df_FND$psychotropic_medication == "1"], df_FND$rrst_sensitivity[df_FND$psychotropic_medication=="0"])
res # sig difference across groups with or without intake of psychotropic medicatioN: t = -2.1273, p-value = 0.04011
res<-t.test(df_FND$metascore[df_FND$psychotropic_medication == "1"], df_FND$metascore[df_FND$psychotropic_medication=="0"])
res #
res<-t.test(df_FND$sdq[df_FND$psychotropic_medication == "1"], df_FND$sdq[df_FND$psychotropic_medication=="0"])
res # sig difference across groups with or without intake of psychotropic medication: t = 2.6337, p-value = 0.0129
# differences of sex in our predictor and outcome variable?
res<-t.test(df_FND$rrst_sensitivity[df_FND$sex=="1"], df_FND$rrst_sensitivity[df_FND$sex=="2"])
res #
res<-t.test(df_FND$metascore[df_FND$sex=="1"], df_FND$metascore[df_FND$sex=="2"])
res #
res<-t.test(df_FND$sdq[df_FND$sex=="1"], df_FND$sdq[df_FND$sex=="2"])
res #
#| warning: FALSE
#| error: FALSE
# RRST sensitivity
sdq_lm <- lm(formula = sdq ~  rrst_sensitivity*group + psychotropic_medication,
data = df)
summary(sdq_lm)
confint(sdq_lm, level = 0.95)
# Save as a text file
lm_summary <- capture.output(summary(sdq_lm))
lm_confint <- capture.output(confint(sdq_lm, level = 0.95))
lm_results <- c("### Linear Model Summary ###", lm_summary,
"", "### Confidence Intervals ###", lm_confint)
writeLines(lm_results, "3.3_lm_rrst_med.txt")
sdq_lm_affective <- lm(formula = sdq ~  rrst_sensitivity*group + psychotropic_medication + anx_dep_SUM,
data = df)
summary(sdq_lm_affective)  #
confint(sdq_lm_affective, level = 0.95)
# Save as a text file
lm_summary <- capture.output(summary(sdq_lm_affective))
lm_confint <- capture.output(confint(sdq_lm_affective, level = 0.95))
lm_results <- c("### Linear Model Summary ###", lm_summary,
"", "### Confidence Intervals ###", lm_confint)
writeLines(lm_results, "3.3_lm_rrst_med_aff.txt")
# metascore
sdq_lm <- lm(formula = sdq ~  metascore*group + psychotropic_medication,
data = df)
summary(sdq_lm)  #
confint(sdq_lm, level = 0.95)
# Save as a text file
lm_summary <- capture.output(summary(sdq_lm))
lm_confint <- capture.output(confint(sdq_lm, level = 0.95))
lm_results <- c("### Linear Model Summary ###", lm_summary,
"", "### Confidence Intervals ###", lm_confint)
writeLines(lm_results, "3.3_lm_meta_med.txt")
sdq_lm_affective <- lm(formula = sdq ~  metascore*group + psychotropic_medication + anx_dep_SUM,
data = df)
summary(sdq_lm_affective)  #
confint(sdq_lm_affective, level = 0.95)
# Save as a text file
lm_summary <- capture.output(summary(sdq_lm_affective))
lm_confint <- capture.output(confint(sdq_lm_affective, level = 0.95))
lm_results <- c("### Linear Model Summary ###", lm_summary,
"", "### Confidence Intervals ###", lm_confint)
writeLines(lm_results, "3.3_lm_meta_med_aff.txt")
# RRST sensitivity FND
sdq_lm_FND <- lm(formula = sdq ~  rrst_sensitivity + psychotropic_medication,
data = df_FND)
summary(sdq_lm_FND)
rrst_affective <- lm(formula = rrst_sensitivity ~  group + anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for rrst_sensitivity
# RRST Sensitivity
rrst_affective <- lm(formula = rrst_sensitivity ~  group*anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for rrst_sensitivity
# RRST Sensitivity
rrst_affective <- lm(formula = rrst_sensitivity ~  group + anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for rrst_sensitivity
# RRST Sensitivity
rrst_affective <- lm(formula = rrst_sensitivity ~  group,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for rrst_sensitivity
# Metascore
rrst_affective <- lm(formula = metascore ~  group + anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for metascore
rrst_affective <- lm(formula = metascore ~  group,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for metascore
rrst_affective <- lm(formula = metascore ~  group + anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for metascore
# RRST Sensitivity GROUP
rrst_affective <- lm(formula = rrst_sensitivity ~  group,
data = df)
summary(rrst_affective)  # GROUP
# RRST Sensitivity GROUP controlled for affective symptoms
rrst_affective <- lm(formula = rrst_sensitivity ~  group + anx_dep_SUM,
data = df)
summary(rrst_affective)  # no sig anymore
# RRST Sensitivity affective symptoms
rrst_affective <- lm(formula = rrst_sensitivity ~  anx_dep_SUM,
data = df)
summary(rrst_affective)  # anx_dep sum score by itself NOT sig for rrst_sensitivity
mean(df$rrst_sensitivity[df$group=="1"])
mean(df$rrst_sensitivity[df$group=="0"])
sd(df$rrst_sensitivity[df$group=="1"])
sd(df$rrst_sensitivity[df$group=="0"])
#| output: false
#| warning: FALSE
#| error: FALSE
# remove everything that we stored in the environment
rm(list=ls())
# Load necessary libraries
library(readr)
library(dplyr)
library(rstatix)
library(gtsummary)
library(ggplot2)
library(ggpubr)
library(openxlsx)
library(gt)
library(stats)
library(grDevices)
library(car)
library(stringr)
library(lubridate)
library(Hmisc)
library(writexl)
### 0.0 PREPARATION -----------------------------------------------------------
# load prepared and cleaned file from 00_preparation: df_yyyymmdd.csv
setwd("/Users/nataschastoffel/Documents/GitHub/interoception_NS")
df_RRST <- read.csv("/Users/nataschastoffel/Documents/GitHub/interoception_NS/data/processed/05-2025/Data.RRST_FINAL_20250509.csv")
# factor variables
factor_variables <- c('group', 'sex', 'psychotropic_medication')
# Apply as.numeric to the selected columns
df_RRST[factor_variables] <- lapply(df_RRST[factor_variables], as.factor)
# numeric variables
numeric_variables <- c('age', 'bmi', 'bdi', 'stai_s', 'stai_t', 'maia_total',
'sdq', 'ctq_total', 'ias', 'rrst_sensitivity', 'rrst_slope', 'average_RT', 'metascore',
'unpleasantness', 'asthma', 'dizziness', 'breathlessness',
'correct_RT', 'incorrect_RT')
# Apply as.numeric to the selected columns
df_RRST[numeric_variables] <- lapply(df_RRST[numeric_variables], as.numeric)
df <- df_RRST
df$maia_commonfactor <- rowSums(df[, c("maia_note", "maia_attreg", "maia_aware",
"maia_sfreg", "maia_body", "maia_trust")])
#| warning: FALSE
#| error: FALSE
# Testing Outlier using boxplot (standard deviation)
df %>%
group_by(group) %>%
identify_outliers(rrst_sensitivity)
# one outlier identified = P063 for rrst_sensitivity
#### Box-Plot with Jitter
plotBoxplotGroups <- function(df, var , tit ){
plot <- ggplot(df, aes(x = group, y = var, fill = group)) +
geom_boxplot(show.legend = TRUE) +
labs(y = "Score") +
theme_classic() +
scale_fill_manual(values = c("#868686FF", "#BB4038")) +
scale_x_discrete(labels = c("HC", "FND")) +
guides(fill = "none") +
ggtitle(tit) +
xlab("") +
geom_jitter(shape = 16, position = position_jitter(0.2))
return(plot)
}
p1 <- plotBoxplotGroups(df, (df$rrst_sensitivity), "Respiration Sensitivity") +
stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
p1
# Filter the rows where rrst_sensitivity is greater than 8 and display pcode (visually detected as extreme)
filtered_pcodes <- df[df$rrst_sensitivity > 8, "pcode"]
print(filtered_pcodes)
# P063
# Calculate mean and standard deviation of rrst_sensitivity
mean_rrst <- mean(df$rrst_sensitivity)
sd_rrst <- sd(df$rrst_sensitivity)
# Define the threshold for filtering (mean + 2.5 * SD)
threshold <- mean_rrst + 2.5 * sd_rrst # 7.07
# Filter the pcodes for rrst_sensitivity greater than the threshold
filtered_pcodes <- df[df$rrst_sensitivity > threshold, "pcode"]
# View the result
filtered_pcodes
# P063
df_exclusion <- df[df$pcode != "63", ]
p1b <- plotBoxplotGroups(df_exclusion, (df_exclusion$rrst_sensitivity), "Respiration Sensitivity") +
stat_compare_means(method = "t.test", paired = FALSE, label.x = 1.3)
print(p1b)
p1b
# Summary of Change - depending on Exclusion of Outlier
summary(df$rrst_sensitivity)
summary(df_exclusion$rrst_sensitivity)
# for statistical reasons we EXCLUDE P063 from the dataset
df <- df[df$pcode != "63", ]
#| output: false
#| warning: FALSE
#| error: FALSE
# Normality of Data -------------------
hist(df$rrst_sensitivity)
shapiro.test(df$rrst_sensitivity) #  normally distributed
hist(df$rrst_slope) # extremely right skewed
df$rrst_slope_log <- log(df$rrst_slope + 1)  # Add 1 to avoid log(0) and log to normalize skewed variables
hist(df$rrst_slope_log) # still skewed but better (for visualization)
shapiro.test(df$rrst_slope_log) #  NOT normally distributed
shapiro.test(df$rrst_slope_log[df$group == "1"]) # patients within themselves are NOT normally distributed
shapiro.test(df$rrst_slope_log[df$group == "0"]) # controls within themselves are normally distributed
hist(df$metascore)
shapiro.test(df$metascore)# NOT normally distributed
shapiro.test(df$metascore[df$group == "1"]) # patients within themselves are NOT normally distributed
shapiro.test(df$metascore[df$group == "0"]) # controls within themselves are normally distributed
df$average_RT <- as.numeric(df$average_RT)
hist(df$average_RT)
shapiro.test(df$average_RT) #  NOT normally distributed
### other variables
shapiro.test(df$age) # normally distributed
shapiro.test(df$bdi) #  NOT normally distributed : p < 0.05
shapiro.test(df$bdi[df$group == "1"]) # patients within themselves are normally distributed
shapiro.test(df$bdi[df$group == "0"]) # controls within themselves are NOT normally distributed
shapiro.test(df$stai_t) #  normally distributed
shapiro.test(df$stai_s) #  NOT normally distributed
shapiro.test(df$stai_s[df$group == "1"]) # patients within themselves are normally distributed
shapiro.test(df$stai_s[df$group == "0"]) # controls within themselves are NOT normally distributed : p < 0.05
shapiro.test(df$ctq_total) #  NOT normally distributed : p < 0.05
shapiro.test(df$ctq_total[df$group == "1"]) # patients within themselves are also NOT normally distributed
shapiro.test(df$ctq_total[df$group == "0"]) # controls within themselves are also NOT normally distributed
shapiro.test(df$sdq) #  NOT normally distributed : p < 0.05
shapiro.test(df$sdq[df$group == "1"]) # patients within themselves are NOT normally distributed
shapiro.test(df$sdq[df$group == "0"]) # controls within themselves are NOT normally distributed : p < 0.05
shapiro.test(df$maia_total) # normally distributed
shapiro.test(df$maia_commonfactor) # normally distributed
shapiro.test(df$maia_note) # NOT normally distributed
shapiro.test(df$ias) # NOT normally distributed
shapiro.test(df$bmi) # NOT normally distributed with p < 0.05
shapiro.test(df$bmi[df$group == "1"]) # within patients bmi is normally distributed
shapiro.test(df$bmi[df$group == "0"]) # within control bmi is NOT normally distributed with p < 0.05
#| output: false
#| warning: FALSE
#| error: FALSE
## testing co-dependency of variables by creating a correlation matrix -----
corr_matrix <- cor(df[, c("age","bmi", "bdi", "stai_s", "stai_t", "ctq_total",
"ias", "maia_total", "sdq", "rrst_sensitivity",
"rrst_slope", "metascore")], use = "complete.obs")
# Set the cutoff for high correlations, that we then want to exclude
cutoff <- 0.7
# Find the indices of correlations that are greater than 0.7 and exclude self-correlations (diagonal)
high_corr <- which(abs(corr_matrix) > cutoff & abs(corr_matrix) < 1, arr.ind = TRUE)
# Display the pairs of variables with high correlations
high_corr_pairs <- data.frame(
Var1 = rownames(corr_matrix)[high_corr[, 1]],
Var2 = colnames(corr_matrix)[high_corr[, 2]],
Correlation = corr_matrix[high_corr]
)
# View the pairs
print(high_corr_pairs) # stai and bdi are highly correlated, which we do accept though as this is a common clinical happening
cor.test(df$bdi, df$stai_t) #
df <- df %>%
mutate(anx_dep_SUM = stai_t + bdi) # create one variable for the trait anxiety and depression to use as one variable in the model
# interoceptive group differences
res1<-t.test(df$rrst_sensitivity[df$group=="1"], df$rrst_sensitivity[df$group=="0"])
res2<-t.test(df$metascore[df$group=="1"], df$metascore[df$group=="0"])
res3<-t.test(df$maia_total[df$group=="1"], df$maia_total[df$group=="0"])
res4<-t.test(df$ias[df$group=="1"], df$ias[df$group=="0"])
p_values <- c(res1$p.value, res2$p.value, res3$p.value, res4$p.value) # extract pvalues
p_adjusted <- p.adjust(p_values, method = "bonferroni") # Correct p-values for multiple comparisons
results_interoceptiongroupdiff <- data.frame(
Comparison = c("FND vs HC: rrst_sensitivity", "FND vs HC: rrst_metacognition", "FND vs HC: MAIA", "FND vs HC: IAS"),
Original_P = p_values,
Adjusted_P = p_adjusted)
print(results_interoceptiongroupdiff)
# define required subgroups
df_female <- df[df$sex == "1", ]
df_male <- df[df$sex == "2", ]
df_HC <- df[df$group == "0", ]
df_FND <- df[df$group == "1", ]
# overview across group and sex distribution
tbl <- df %>%
mutate(sex = factor(sex, levels = c("1", "2"), labels = c("female", "male"))) %>%
mutate(group = factor(group, levels = c("0", "1"), labels = c("HC", "FND")))
tbl1<-table(tbl$group,tbl$sex)
tbl1
# overview for mean age across group
summary_stats <- tbl %>%
group_by(group) %>%
get_summary_stats(age, type = "full") # 'full' includes mean, SD, min, max, etc.
print(summary_stats)
shapiro.test(df$bmi) # NOT normally distributed with p < 0.05
